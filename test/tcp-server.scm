#!r6rs
(import (rnrs)
	(pffi)
	(usocket))

(define service "10000")
(define echo-server-socket (make-tcp-server-usocket service))

(define (socket-shutdown&close s)
  (usocket-shutdown! s *usocket:shutdown-read&write*)
  (usocket-close! s))

(define (echo-server-start! socket)
  (let loop ((s (server-usocket-accept! socket)))
    (define in (transcoded-port (client-usocket-input-port s)
				(native-transcoder)))
    (define out (transcoded-port (client-usocket-output-port s)
				 (native-transcoder)))
    (let loop2 ()
      (let ((line (get-line in)))
	(cond ((or (eof-object? line) (string=? line "exit"))
	       (socket-shutdown&close s)
	       (socket-shutdown&close socket))
	      ((string=? line "nomore")
	       (socket-shutdown&close s)
	       (loop (server-usocket-accept! socket)))
	      (else (put-string out line)
		    (flush-output-port out)
		    (put-string out "\n")
		    (flush-output-port out)
		    (loop2)))))))

(echo-server-start! echo-server-socket)
